import container from 'markdown-it-container';

const tabIds = /* @__PURE__ */ new Map();
function dedupeId(id) {
  const normalizedId = String(id).toLowerCase().replace(" ", "-");
  const currentValue = !tabIds.has(normalizedId) ? 1 : tabIds.get(normalizedId) + 1;
  tabIds.set(normalizedId, currentValue);
  return `${normalizedId}-${currentValue}`;
}
function mergeDuplicatesName(arr) {
  const nameArr = arr.filter((item) => item.startsWith("name"));
  if (nameArr.length <= 1)
    return arr;
  let newName = "";
  nameArr.forEach((item) => {
    newName += `${item.replace(/name="(.+?)"/, "$1")} `;
  });
  newName = `name="${newName.trim()}"`;
  const newArr = arr.filter((item) => !item.startsWith("name"));
  newArr.unshift(newName);
  return newArr;
}
function tabAttributes(val, options = {}) {
  let attributes = val.trim().slice("tab".length).trim().split(/ +(?=(?:(?:[^"]*"){2})*[^"]*$)/g).map((attr) => {
    if (!attr.includes("=")) {
      if (!attr.startsWith('"'))
        attr = `"${attr}`;
      if (!attr.endsWith('"'))
        attr = `${attr}"`;
      return `name=${attr}`;
    }
    return attr;
  });
  attributes = mergeDuplicatesName(attributes);
  if (options.dedupeIds) {
    const idIndex = attributes.findIndex((attr) => attr.startsWith("id="));
    const nameIndex = attributes.findIndex((attr) => attr.startsWith("name="));
    if (idIndex !== -1) {
      const id = attributes[idIndex];
      const [, idValue] = id.split("=");
      attributes[idIndex] = `id="${dedupeId(idValue.substring(1, idValue.length - 1))}"`;
    } else {
      const name = attributes[nameIndex];
      const [, nameValue] = name.split("=");
      attributes.unshift(`id="${dedupeId(nameValue.substring(1, nameValue.length - 1))}"`);
    }
  }
  return attributes.join(" ");
}
function tabsAttributes(val) {
  return val.trim().slice("tabs".length).trim();
}
function defaultTabsAttributes(attributes) {
  const attributesString = [];
  if (!attributes || Object.keys(attributes).length === 0)
    return "";
  for (const key in attributes) {
    const substring = `:${key}='${JSON.stringify(attributes[key])}'`;
    attributesString.push(substring);
  }
  return attributesString.join(" ");
}

const tabs = (md, options) => {
  md.use(container, "tabs", {
    render: (tokens, idx) => {
      const token = tokens[idx];
      const defaultAttributes = defaultTabsAttributes(options.tabsAttributes);
      const attributes = tabsAttributes(token.info);
      if (token.nesting === 1)
        return `<tabs ${defaultAttributes} ${attributes}>
`;
      else
        return "</tabs>\n";
    }
  });
};

const tab = (md, options) => {
  md.use(container, "tab", {
    render: (tokens, idx) => {
      const token = tokens[idx];
      const attributes = tabAttributes(token.info, options);
      if (token.nesting === 1)
        return `<tab ${attributes}>
`;
      else
        return "</tab>\n";
    }
  });
};

function tabsPlugin(md, opts = {}) {
  const defaultOptions = { dedupeIds: false };
  const options = Object.assign({}, defaultOptions, opts);
  tabs(md, options);
  tab(md, options);
}

export { tabsPlugin as default };
