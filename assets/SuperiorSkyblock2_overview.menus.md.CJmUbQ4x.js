import{_ as n,C as i,c as d,o as l,b1 as h,G as a}from"./chunks/framework.CC7vnuC4.js";const b=JSON.parse('{"title":"菜单","description":"","frontmatter":{"breadcrumbs":[{"title":"Continue Project","link":"/SuperiorSkyblock2"},{"title":"菜单","link":"/SuperiorSkyblock2/overview.menus"}]},"headers":[],"relativePath":"SuperiorSkyblock2/overview.menus.md","filePath":"SuperiorSkyblock2/overview.menus.md"}'),p={name:"SuperiorSkyblock2/overview.menus.md"};function k(r,s,o,c,E,g){const t=i("NolebaseGitContributors"),e=i("NolebaseGitChangelog");return l(),d("div",null,[s[0]||(s[0]=h(`<h1 id="菜单" tabindex="-1">菜单 <a class="header-anchor" href="#菜单" aria-label="Permalink to &quot;菜单&quot;">​</a></h1><p>菜单（GUI）出现在插件的许多地方，它们都是可以自定义的。<br> 本章节将会讲述其修改方法。</p><h2 id="编辑菜单样式" tabindex="-1">编辑菜单样式 <a class="header-anchor" href="#编辑菜单样式" aria-label="Permalink to &quot;编辑菜单样式&quot;">​</a></h2><p>你可以编辑菜单的样式，包括标题、容器类型以及行数。</p><div class="info custom-block"><p class="custom-block-title">注意</p><p>部分菜单包含了本章节未提及的额外设置（如<a href="./overview.schematics">结构</a>菜单）</p></div><table tabindex="0"><thead><tr><th>名称</th><th>描述</th><th>支持菜单</th></tr></thead><tbody><tr><td><code>title</code></td><td>菜单的自定义标题。支持彩色代码及 1.16+ 的十六进制彩色及变量。</td><td>全部</td></tr><tr><td><code>type</code></td><td>菜单的类型。可在<a href="https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/event/inventory/InventoryType.html%E6%89%BE%E5%88%B0%E6%89%80%E6%9C%89%E6%94%AF%E6%8C%81%E7%9A%84%E5%AE%B9%E5%99%A8%E7%B1%BB%E5%9E%8B%E3%80%82" target="_blank" rel="noreferrer">https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/event/inventory/InventoryType.html找到所有支持的容器类型。</a></td><td>全部</td></tr><tr><td><code>previous-menu</code></td><td>是否在关闭该界面时显示上一级菜单。</td><td>全部</td></tr><tr><td><code>open-sound</code></td><td>打开界面时播放的音效。应当遵循声音格式。</td><td>全部</td></tr><tr><td><code>back</code></td><td>菜单的返回按钮。启用 <code>only-back-button</code> 后该项为必选。</td><td>全部</td></tr><tr><td><code>previous-page</code></td><td>菜单的上一页按钮。</td><td>分页菜单</td></tr><tr><td><code>current-page</code></td><td>菜单的当前页按钮。</td><td>分页菜单</td></tr><tr><td><code>next-page</code></td><td>菜单的下一页按钮。</td><td>分页菜单</td></tr><tr><td><code>slots</code></td><td>用于展示分页菜单内容（地标传送点、成员列表等）的按钮。</td><td>分页菜单</td></tr></tbody></table><p>除了上述的这些，还有一个非常重要的设置项：<code>pattern</code>。<br> 这部分设置决定了菜单的排版，或者换言之，菜单的行数及其内的物品。它由一系列列表组成，每一个元素都代表着菜单的一行。每个字符串的长度都应该和菜单的列数相同。<br><em>（普通菜单一行九格，而漏斗一行只有五格。）</em><br> 每个菜单中的物品都由一个不重复的字符表示，可以设置在菜单中的任意位置。相同字符表示同一个物品。</p><h2 id="排版示例" tabindex="-1">排版示例 <a class="header-anchor" href="#排版示例" aria-label="Permalink to &quot;排版示例&quot;">​</a></h2><p>下列菜单以 <code>A</code> 表示一个占满了一行的物品：</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A A A A A A A A A&#39;</span></span></code></pre></div><p>下列菜单有五行，以一圈相同物品作边框，其余空位则用其他字符表示：</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A A A A A A A A A&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A B B B B B B B A&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A B B B B B B B A&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A B B B B B B B A&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A A A A A A A A A&#39;</span></span></code></pre></div><h2 id="编辑菜单内的物品" tabindex="-1">编辑菜单内的物品 <a class="header-anchor" href="#编辑菜单内的物品" aria-label="Permalink to &quot;编辑菜单内的物品&quot;">​</a></h2><p>所有物品样式都是通过菜单下的 <code>items</code> 部分进行设置的。在这部分下，每个物品都可以按需要修改。这部分的名称是你为物品选择的自定义字符。在上述的示例中，它们就是 <code>A</code> 和 <code>B</code>。因此，它们的 <code>items</code> 部分如下所示：</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 物品的所有设置</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 物品的所有设置</span></span></code></pre></div><p>每个物品都可按需修改，你可以添加下列表格中的任意属性。</p><div class="info custom-block"><p class="custom-block-title">注意</p><p>SuperiorSkyBlock 仅支持材料名称。不支持数字 ID。你可以在<a href="https://bg-software.com/materials/" target="_blank" rel="noreferrer">这里</a>找到你需要的材料名称。</p></div><table tabindex="0"><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>type</code></td><td>物品的材料类型。</td></tr><tr><td><code>data</code></td><td>物品的数据值。1.12 以下的版本通过该设置决定物品。</td></tr><tr><td><code>name</code></td><td>物品的自定义名称（支持彩色代码）。</td></tr><tr><td><code>lore</code></td><td>物品的自定义描述（支持彩色代码）。</td></tr><tr><td><code>enchants</code></td><td>物品包含的自定义附魔。每条附魔都会有不同的子设置，用于决定其等级。</td></tr><tr><td><code>glow</code></td><td>物品是否带有附魔光泽。该方法不会使物品显示附魔。</td></tr><tr><td><code>flags</code></td><td>对物品应用的物品标签。仅 1.9+ 可用。完整标志列表可在<a href="https://helpch.at/docs/1.12.2/index.html?org/bukkit/inventory/ItemFlag.html" target="_blank" rel="noreferrer">这里</a>查看。</td></tr><tr><td><code>skull</code></td><td>如果物品为玩家头颅，则该选项决定其 Base64 皮肤值。可通过<a href="https://minecraft-heads.com/" target="_blank" rel="noreferrer">此网站</a>查询。</td></tr><tr><td><code>unbreakable</code></td><td>为物品设置 Spigot 的无法破坏标签。</td></tr><tr><td><code>effects</code></td><td>如果物品为药水，则该选项决定其包含的药水效果。更多描述见下。</td></tr><tr><td><code>entity</code></td><td>如果物品为刷怪蛋，则该选项决定其生成的实体类型。用于替代旧版本的数据值设置。</td></tr><tr><td><code>customModel</code></td><td>为物品设置自定义模型数据。与资源包搭配可为物品赋予自定义贴图。仅 1.14+ 可用。</td></tr><tr><td><code>leatherColor</code></td><td>如果物品为皮革盔甲，则该选项决定其颜色。使用十六进制彩色格式。</td></tr></tbody></table><h3 id="效果设置" tabindex="-1">效果设置 <a class="header-anchor" href="#效果设置" aria-label="Permalink to &quot;效果设置&quot;">​</a></h3><p>效果部分设置可为药水类物品添加自定义效果。每个效果都有其子配置，包含两个参数：<code>duration</code> 与 <code>amplifier</code>。<br> 如下为菜单中显示持续五分钟的速度 II 药水物品的示例：</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">POTION</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  effects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 为药水添加速度效果</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    speed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 效果的持续时间, 单位为秒</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      duration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 药水效果的倍率. 倍率 = 等级 - 1.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      amplifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><h2 id="物品音效" tabindex="-1">物品音效 <a class="header-anchor" href="#物品音效" aria-label="Permalink to &quot;物品音效&quot;">​</a></h2><p>你可以为物品设置点击音效。其必须按指定格式填写，下文会详细讲述。与物品配置的方式相同，声音位于 <code>sounds</code> 部分下，且子配置与按钮配置的格式相似。</p><table tabindex="0"><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>type</code></td><td>播放声音的名称。</td></tr><tr><td><code>volume</code></td><td>音量大小。</td></tr><tr><td><code>pitch</code></td><td>音高。</td></tr></tbody></table><p>如下为物品 <code>A</code> 添加声音的示例配置：</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sounds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ENTITY_EXPERIENCE_ORB_PICKUP</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    pitch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span></span></code></pre></div><h2 id="运行自定义音效" tabindex="-1">运行自定义音效 <a class="header-anchor" href="#运行自定义音效" aria-label="Permalink to &quot;运行自定义音效&quot;">​</a></h2><p>你可以在点击物品时执行命令。你可以通过 <code>commands</code> 部分执行自定义命令，它的配置与上文所述声音部分相似。命令可以为控制台或玩家身份执行。除此之外，你还可以使用内建变量 <code>%player%</code> 返回点击物品的玩家名称。</p><h3 id="以玩家身份执行命令" tabindex="-1">以玩家身份执行命令 <a class="header-anchor" href="#以玩家身份执行命令" aria-label="Permalink to &quot;以玩家身份执行命令&quot;">​</a></h3><p>将 <code>[player]</code> 添加在命令开头，使得命令以玩家身份而非默认的控制台身份执行。</p><h3 id="执行岛屿命令" tabindex="-1">执行岛屿命令 <a class="header-anchor" href="#执行岛屿命令" aria-label="Permalink to &quot;执行岛屿命令&quot;">​</a></h3><p>你可以在方括号中设置子命令来执行岛屿命令。如 <code>[player] [tp]</code> 表示以玩家身份执行命令 <code>/is tp</code>。对于带有参数的命令，只需将参数加在括号之外即可。</p><h3 id="执行自定义命令" tabindex="-1">执行自定义命令 <a class="header-anchor" href="#执行自定义命令" aria-label="Permalink to &quot;执行自定义命令&quot;">​</a></h3><p>你可以将不带斜杠 <code>/</code> 的命令填入其中。如 <code>bc &amp;cHello!</code> 会解析为控制台身份执行 <code>/bc &amp;cHello!</code> 命令。</p><h3 id="内建操作" tabindex="-1">内建操作 <a class="header-anchor" href="#内建操作" aria-label="Permalink to &quot;内建操作&quot;">​</a></h3><p>插件提供了两种可执行的自定义操作——关闭菜单和返回上级菜单。与玩家动作相似，你可以使用 <code>[close]</code> 触发关闭菜单操作，使用 <code>[back]</code> 触发返回上级菜单操作。</p><h2 id="权限部分" tabindex="-1">权限部分 <a class="header-anchor" href="#权限部分" aria-label="Permalink to &quot;权限部分&quot;">​</a></h2><p>你可以为按钮设置权限，这样玩家就需要权限才可以点击物品。所有权限都需按照下文所述的特定格式填写。与物品配置的方式相同，声音位于 <code>permissions</code> 部分下，且子配置与按钮配置的格式相似。<br> 权限部分有两个设置：</p><table tabindex="0"><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>permission</code></td><td>要求玩家拥有的权限。</td></tr><tr><td><code>no-access-sound</code></td><td>没有权限时向玩家的音效。</td></tr></tbody></table><p>以物品 <code>A</code> 为例，如下是添加按钮权限的配置：</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">permissions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    permission</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my.custom.permission&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    no-access-sound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">BLOCK_ANVIL_PLACE</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      volume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      pitch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">信息</p><p>推荐在编辑菜单时保持默认格式。这可以让编辑菜单的过程更加简单！</p></div><h2 id="创建自定义菜单" tabindex="-1">创建自定义菜单 <a class="header-anchor" href="#创建自定义菜单" aria-label="Permalink to &quot;创建自定义菜单&quot;">​</a></h2><p>你可以制作以特定子命令打开的自定义菜单。普通菜单的规则也适用于自定义菜单。只需在 <code>custom</code> 文件夹下创建一个新的文件夹——每个文件都代表一个自定义菜单。除了其他菜单的通用设以外，自定义菜单还可以拥有如下设置：</p><table tabindex="0"><thead><tr><th>名称</th><th>描述</th><th>是否必须</th></tr></thead><tbody><tr><td><code>command</code></td><td>用于打开菜单的子命令（<code>/is {子命令}</code>）。</td><td>必需</td></tr><tr><td><code>aliases</code></td><td>以逗号 <code>,</code> 分隔的命令别称列表。</td><td>可选</td></tr><tr><td><code>permission</code></td><td>执行命令所需的权限。</td><td>可选</td></tr><tr><td><code>description</code></td><td>不同语言的命令描述。它会显示在 <code>/is help</code> 当中。</td><td>可选</td></tr><tr><td><code>display-command</code></td><td>是否在 <code>/is help</code> 菜单中显示该命令。</td><td>可选</td></tr></tbody></table><h3 id="命令部分" tabindex="-1">命令部分 <a class="header-anchor" href="#命令部分" aria-label="Permalink to &quot;命令部分&quot;">​</a></h3><p>命令部分需要按格式正确配置，以确保插件能注册你的自定义菜单。如下为正确设置命令部分的示例：</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  aliases</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">alias1, alias2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  permission</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;your.permission&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  display-command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    en-US</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;This is just a test menu.&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    fr-FR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Il s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&#39;&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">agit du menu de test.&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    zh-CN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;此为测试菜单.&#39;</span></span></code></pre></div><h3 id="描述部分" tabindex="-1">描述部分 <a class="header-anchor" href="#描述部分" aria-label="Permalink to &quot;描述部分&quot;">​</a></h3><p>描述部分需要为每个语言分配一个子区域，其键名为对应语言代码。如下所示：</p><div class="language-YAML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">YAML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 英语语言下的自定义描述.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  en-US</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;This is a custom command to open a custom menu&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 法语语言下的自定义描述.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  fr-FR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 简体中文语言下的自定义描述.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  zh-CN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;这是一条打开自定义菜单的自定义命令&#39;</span></span></code></pre></div>`,51)),a(t),a(e)])}const u=n(p,[["render",k]]);export{b as __pageData,u as default};
