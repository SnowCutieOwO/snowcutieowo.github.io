import{_ as n,C as s,c as p,o as l,an as r,G as i}from"./chunks/framework.FiaHILad.js";const h="/assets/standalone-attach-startup.BXbzfMpB.png",o="/assets/standalone-attach-later.owrNX0ml.png",k="/assets/standalone-attach-later-app.DNJe321z.png",d="/assets/standalone-ssh-interface.BmdbUfZn.png",v=JSON.parse('{"title":"独立代理","description":"","frontmatter":{"breadcrumbs":[{"title":"Continue Project","link":"/spark"},{"title":"独立代理","link":"/spark/spark.standalone-agent"}]},"headers":[],"relativePath":"spark/spark.standalone-agent.md","filePath":"spark/spark.standalone-agent.md"}'),c={name:"spark/spark.standalone-agent.md"};function g(F,a,b,u,m,C){const t=s("NolebaseGitContributors"),e=s("NolebaseGitChangelog");return l(),p("div",null,[a[0]||(a[0]=r('<h1 id="独立代理" tabindex="-1">独立代理 <a class="header-anchor" href="#独立代理" aria-label="Permalink to &quot;独立代理&quot;">​</a></h1><p>除了在服务器、客户端或群组上以插件/模组方式运行外，spark 也支持为任意运行于 Java 虚拟机（JVM）上的应用进行性能侧写。如，网站应用、Discord 机器人或其他使用 Java、Kotlin、Scala 编写的应用等。</p><p>这是通过将 spark 以“Java 代理”的形式应用于 JVM 的。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>这个方法也适用于未安装模组加载器的“原版”Minecraft 客户端或服务器，它本身就是一个 Java 应用！如下的示例会详细讲述。</p><p>spark 还对原版的服务器有额外兼容，在为原版服务器进行性能侧写时会自动反混淆映射。</p></div><h2 id="安装-启动时应用" tabindex="-1">安装（启动时应用） <a class="header-anchor" href="#安装-启动时应用" aria-label="Permalink to &quot;安装（启动时应用）&quot;">​</a></h2><p>从<a href="https://spark.lucko.me/download" target="_blank" rel="noreferrer">下载页</a>获取 spark 独立版本的 jar 文件。</p><p>之后，在启动程序时，将如下 <code>-javaagent</code> 端的参数加入命令。</p><p>例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -javaagent:spark-x.y.z-standalone-agent.jar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application.jar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [应用参数]</span></span></code></pre></div><p>你也可以通过 <code>port</code> 参数指定代理监听的端口号，如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -javaagent:spark-x.y.z-standalone-agent.jar=port=2222</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application.jar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [应用参数]</span></span></code></pre></div><figure><img src="'+h+`" alt="image" tabindex="0"><figcaption>image</figcaption></figure><h2 id="安装-运行时应用" tabindex="-1">安装（运行时应用） <a class="header-anchor" href="#安装-运行时应用" aria-label="Permalink to &quot;安装（运行时应用）&quot;">​</a></h2><p>若要将 spark 独立代理应用至正在运行中的 Java 应用，你可以执行如下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将 &lt;进程ID&gt; 替换为正在运行的 Java 应用进程 ID</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark-x.y.z-standalone-agent.jar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者指定端口号</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> spark-x.y.z-standalone-agent.jar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> port=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2222</span></span></code></pre></div><p>如果你运行 jar 的时候没有指定进程 ID，它会显示所有运行的 Java 程序及其进程 ID。</p><figure><img src="`+o+'" alt="image" tabindex="0"><figcaption>image</figcaption></figure><p>在代理应用完毕后，连接操作步骤会显示在程序本身的控制台/日志中。</p><figure><img src="'+k+'" alt="image" tabindex="0"><figcaption>image</figcaption></figure><h2 id="用法-ssh-界面" tabindex="-1">用法（SSH 界面） <a class="header-anchor" href="#用法-ssh-界面" aria-label="Permalink to &quot;用法（SSH 界面）&quot;">​</a></h2><p>在代理添加完毕后，你可以通过特殊的 SSH 界面与其交互。在代理启动时，它会在控制台/日志输出中显示连接操作步骤。</p><p>只需简单地将 SSH 命令复制到新打开的终端界面并输入密码即可。</p><figure><img src="'+d+'" alt="image" tabindex="0"><figcaption>image</figcaption></figure><p>在 SSH 界面中，你可以使用一般的 <a href="./spark.command-usage">spark 命令</a>，以及特殊的 <code>exit</code> 命令，用于退出界面。</p><h2 id="代理参数" tabindex="-1">代理参数 <a class="header-anchor" href="#代理参数" aria-label="Permalink to &quot;代理参数&quot;">​</a></h2><p>在添加代理时，你可以指定如下参数：</p><ul><li><code>port={端口号}</code> - 指定代理监听的端口号。默认为 <code>2222</code>。</li><li><code>start</code> - 若存在，代理在连接成功后便会立即开始性能侧写。</li><li><code>open</code> - 若存在，代理在连接成功后会在控制台/日志中显示报告连接。</li></ul><p>可使用英文逗号 <code>,</code> 指定多个参数。如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -javaagent:spark-x.y.z-standalone-agent.jar=port=2222,start,open</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application.jar</span></span></code></pre></div>',29)),i(t),i(e)])}const f=n(c,[["render",g]]);export{v as __pageData,f as default};
