import{_ as t,C as i,c as l,o as k,b1 as p,G as a}from"./chunks/framework.CC7vnuC4.js";const F=JSON.parse('{"title":"注册方块键","description":"","frontmatter":{"breadcrumbs":[{"title":"Continue Project","link":"/SuperiorSkyblock2"},{"title":"注册方块键","link":"/SuperiorSkyblock2/overview.api.register-your-own-block-keys"}]},"headers":[],"relativePath":"SuperiorSkyblock2/overview.api.register-your-own-block-keys.md","filePath":"SuperiorSkyblock2/overview.api.register-your-own-block-keys.md"}'),h={name:"SuperiorSkyblock2/overview.api.register-your-own-block-keys.md"};function r(E,s,o,d,y,g){const n=i("NolebaseGitContributors"),e=i("NolebaseGitChangelog");return k(),l("div",null,[s[0]||(s[0]=p(`<h1 id="注册方块键" tabindex="-1">注册方块键 <a class="header-anchor" href="#注册方块键" aria-label="Permalink to &quot;注册方块键&quot;">​</a></h1><p>键系统用于将方块与物品判定为可比较对象，这样就能支持新旧两个版本。注册自定义键之后，你可以为自定义方块赋予自定义键，使其能从相似方块中被分辨。在本教程中，我会制作一个“魔法海绵”的自定义键。</p><p>为了实现这个，首先我要调用 <code>SuperiorSkyblockAPI.getBlockValues().registerKeyParser()</code> 方法。这个方法需要两个参数：</p><ul><li><code>customKeyParser</code>：我们需要创建的 <code>CustomKeyParser</code> 实例。</li><li><code>blockTypes</code>：可被判断器判定的方块列表。</li></ul><p>首先，我需要创建一个 <code>CustomKeyParser</code> 对象。示例包含两个需要实现的方法：</p><ul><li><code>getCustomKey(&lt;位置&gt;)</code>：处理判断部分。</li><li><code>isCustomKey(&lt;键&gt;)</code>：这个方法用在方块计数菜单中，将自定义键变为其方块形式。</li></ul><p>在创建对象并实现基本的判断功能后，代码应当像这样：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Set&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; powerfulSponges </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HashSet&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Key SPONGE_KEY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SPONGE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Key POWERFUL_SPONGE_KEY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POWERFUL_SPONGE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PowerfulSpongeParser</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomKeyParser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Key </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCustomKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Location </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            /* 所有自定义海绵方块都会存储在 powerfulSponges 中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            因为其中的所有方块一定都是 SPONGE, 所以我可以在它不是特殊海绵时返回普通海绵键名. 反之则会返回我设置的自定义海绵键名. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> powerfulSponges.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(location) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> POWERFUL_SPONGE_KEY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SPONGE_KEY;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isCustomKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Key </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 若键名为插件创建的 &quot;POWERFUL_SPONGE&quot;, 那么返回 true.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(POWERFUL_SPONGE_KEY);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>大功告成！每次我放置一块魔法海绵时，它都会被判定为“POWERFUL_SPONGE”而非普通海绵。这支持显示在计数菜单、价值菜单、价值文件、等级文件以及其他需要显示的地方！</p>`,9)),a(n),a(e)])}const u=t(h,[["render",r]]);export{F as __pageData,u as default};
