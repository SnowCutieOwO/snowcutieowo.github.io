import{_ as r,C as o,c as d,o as c,am as s,G as a}from"./chunks/framework.SAy2jMg1.js";const b=JSON.parse('{"title":"配置","description":"","frontmatter":{"breadcrumbs":[{"title":"Continue Project","link":"/FastAsyncWorldEdit"},{"title":"配置","link":"/FastAsyncWorldEdit/customization.configuration"}]},"headers":[],"relativePath":"FastAsyncWorldEdit/customization.configuration.md","filePath":"FastAsyncWorldEdit/customization.configuration.md"}'),n={name:"FastAsyncWorldEdit/customization.configuration.md"};function l(p,e,m,h,u,f){const t=o("NolebaseGitContributors"),i=o("NolebaseGitChangelog");return c(),d("div",null,[e[0]||(e[0]=s('<h1 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>FAWE 开箱即用，但配置可以调整限制与操作队列相关设置，使得 FAWE 更适合服务器。请参考如下条目及其中的默认配置注释以更好了解它们。</p><p>若你在调整编辑操作相关设置的过程中遇到了问题，请在进行其他操作之前先重置配置，可以将其删除并重启服务器或通过命令 <code>/fawe</code> 重载插件生成默认配置。</p><h2 id="一步操作" tabindex="-1">一步操作 <a class="header-anchor" href="#一步操作" aria-label="Permalink to &quot;一步操作&quot;">​</a></h2><p>WorldEdit 本身在放置方块前会尝试在内存中完成每个操作。除此之外，它还会在内存中存储撤销操作（历史记录），这会在大面积编辑时增加内存压力，从而导致服务器内存溢出并崩溃，或导致编辑未能成功完成。</p><p>而在 FAWE 中，每个编辑操作都处于各自的异步线程，以此提升大部分操作的速度。它会先在世界内放置方块，而非先等待操作完成。这允许大面积有更快的编辑速度。另外，方块的放置机制如同见缝插针，因此它们不会消耗大量内存。</p><p>FAWE 也可以在磁盘内存储撤销操作（历史记录），与其他改进一并使用时，可让 FAWE 以最小的影响完成最大程度的编辑。</p><h2 id="限制设定" tabindex="-1">限制设定 <a class="header-anchor" href="#限制设定" aria-label="Permalink to &quot;限制设定&quot;">​</a></h2><p>这些设置允许为不同组别的玩家设置 WorldEdit 一次可编辑的方块数量。<code>default</code> 部分对所有不启用限制绕过功能的普通玩家生效。见<a href="./customization.permissions">权限章节</a> <em>fawe.bypass</em> 与 <em>fawe.admin</em> 了解更多信息。</p><p>你也可以为指定组别设置限制，并通过权限将其分配至不同玩家。见下文的默认配置注释部分了解更多。</p><h2 id="队列设置" tabindex="-1">队列设置 <a class="header-anchor" href="#队列设置" aria-label="Permalink to &quot;队列设置&quot;">​</a></h2><p>该部分的设置允许你调整异步队列操作使用的内存及编辑速度的相关设置。</p><h2 id="本地队列" tabindex="-1">本地队列 <a class="header-anchor" href="#本地队列" aria-label="Permalink to &quot;本地队列&quot;">​</a></h2><p>FAWE 从服务器主线程中分离，在单独的异步线程中完成编辑命令的操作，每个队列中编辑的方块会在处理后存入玩家的本地队列。</p><p>在队列中，方块按区块排列，使得 FAWE 能够通过更高效的区块算法在世界内（发送请求）放置方块。例如，WorldEdit 本身会在改变方块后执行光照更新、物理更新，最终发送数据包。而 FAWE 则使用按区块排列的方块队列，使其能以更高效的区块算法在世界内放置方块。</p><p>本地队列在编辑开始时处于未完成状态。当输入 <code>//set</code> 或 <code>//copy</code> 命令产生了方块队列，它们就已经准备好被放置了。当其他命令（如 <code>//smooth</code> 和 <code>//deform</code>）编辑了方块时，它会根据世界内其他方块位置及可能会被多次修改的方块而作出相应改变。（通常来讲，所有本地改动的方块数量等同于 64 个区块。）</p><p>完成编辑后，队列会变为完成状态。</p><h2 id="全局队列" tabindex="-1">全局队列 <a class="header-anchor" href="#全局队列" aria-label="Permalink to &quot;全局队列&quot;">​</a></h2><p>FAWE 通过全局队列来放置本地队列编辑中的方块。全局队列优先级按插入顺序排列，因此更早的本地队列会优先放置。全局队列中放置在世界内的方块在主线程处理。</p><p>FAWE 放置的方块只来源于完成状态的本地队列，且完成的本地队列列表必须在执行未完成本地队列中的方块放置操作前空置。</p><p>全局队列会与正在处理的本地编辑队列链接。（在内部代码中等价于两个队列——一个用于处理完成的本地队列，一个则用于处理未完成的本地队列。）</p><h2 id="效率改进" tabindex="-1">效率改进 <a class="header-anchor" href="#效率改进" aria-label="Permalink to &quot;效率改进&quot;">​</a></h2><p>FAWE 也会在没有完整队列可用时尝试放置不完整队列内的方块，以此提升方块放置的性能。</p><ul><li><em>target-size</em></li></ul><p>FAWE 通过这个参数决定单次尝试处理不完整队列时的方块数量，且确保这些方块不会有后续改动。</p><p>部分诸如 <code>//smooth</code> 和 <code>//deform</code> 的命令，在其他操作命令仍在处理的情况下，可能不会正确生效（但这些命令通常不会改变邻近 64 个区块内的内容）。这些方块会根据其他方块位置改变，邻近方块也有可能被多次改变。在这种情况下，任意方块会被修改的可能性会在 64 区块的改动进入队列后降低。这不是诸如 <code>//copy</code> 和 <code>//set</code> 等简单操作会出现的问题，因为这些方块不会多次改变。</p><p>如果没有等待放置的完整本地队列且 <em>target-size</em> 或更多数量的待编辑区块加入了队列，则全局队列会从正在处理的编辑中挑选并开始处理仍在其内的方块。</p><p>这个设置可以确保诸如 <code>//smooth</code> 与 <code>//deform</code> 命令放置的方块尽可能文档，同时也确保全局队列能持续放置方块而不会闲置。</p><p>默认的 <em>target-size</em> 值为 64。</p><p>若不设置 <em>target-size</em>，则通过 <code>/fastmode</code> 进行的大型编辑会导致不完整队列排入的速度快于 <code>max-wait-ms</code> 设置可清空的时间。</p><p>减少 <em>target-size</em> 的值可能会降低诸如 <code>//smooth</code> 与 <code>//deform</code> 等命令的性能，因为插件可能会在重复改变已放置方块上浪费时间。另外，这些命令取决于其他方块的位置，若 <em>target-size</em> 不够大，且不完整队列中放置的方块可能会在之后改变，则最终放置的方块可能会与处理结果不同。这可能导致命令出现问题，因此请尽可能将 <em>target-size</em> 调大以避免此类问题。</p><p>调大 <em>target-size</em> 不很有用，因为大部分有关编辑都出现在小于 64 个区块的处理时间中。同时，如果该值足够大，它有可能会使得 FAWE 在恢复会使得服务器内存溢出的大范围编辑时出现问题。</p><ul><li><em>max-wait-ms</em></li></ul><p>FAWE 在放置已处理编辑中的方块时速度最快。但是，这一过程既耗时又浪费内存，因此，这个设置会在编辑未完成但有方块可放置时，将它们发送至全局队列而非将其闲置于本地队列。</p>',35)),a(t),a(i)])}const E=r(n,[["render",l]]);export{b as __pageData,E as default};
