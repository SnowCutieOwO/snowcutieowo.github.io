import{_ as t,C as o,c,o as s,an as n,G as a}from"./chunks/framework.CUFjuIqA.js";const b=JSON.parse('{"title":"SQL","description":"","frontmatter":{"breadcrumbs":[{"title":"Continue Project","link":"/AuraSkills"},{"title":"SQL","link":"/AuraSkills/main-config.sql"}]},"headers":[],"relativePath":"AuraSkills/main-config.sql.md","filePath":"AuraSkills/main-config.sql.md"}'),r={name:"AuraSkills/main-config.sql.md"};function d(p,e,S,u,_,m){const l=o("NolebaseGitContributors"),i=o("NolebaseGitChangelog");return s(),c("div",null,[e[0]||(e[0]=n('<h1 id="sql" tabindex="-1">SQL <a class="header-anchor" href="#sql" aria-label="Permalink to &quot;SQL&quot;">​</a></h1><p>指导搭建与配置 SQL 数据库的教程。</p><p>在 <code>config.yml</code> 下的 <code>sql</code> 设置允许插件将玩家数据存储在数据库而非 YAML 文件中。目前仅支持 MySQL（和 MariaDB）。通过 SQL 存储数据能够在较多玩家的情况下有更好的性能表现，且允许多服同步数据，并使得第三方代码能更好地与数据交互。</p><h2 id="基础搭建" tabindex="-1">基础搭建 <a class="header-anchor" href="#基础搭建" aria-label="Permalink to &quot;基础搭建&quot;">​</a></h2><p>在着手修改 AuraSkills 配置钱，必须单独准备一个 SQL 数据库（通过服务器面板或中断）。数据库应当包含域名（通常为 IP 地址）、数据库名称、端口号、用户名及密码。</p><p>配置 SQL 的选项位于 <code>config.yml</code> 下的 <code>sql</code> 部分。若要启用 SLQ，只需将 <code>enabled</code> 设置为 true 即可。在 <code>host</code>、<code>port</code> 和 <code>database</code> 下分别填入域名、端口号及数据库名称。之后，在对应部分下填写用户名和密码。若需要还可在 <code>ssl</code> 处设置启用 SSL。</p><p>启动后，SQL 即可正常工作。AuraSkills 会在数据库内自动创建数据表。若 SQL 未能正常工作，请检查启动时是否出现报错，并再次检查数据库凭证是否填写正确。</p><h2 id="从-yaml-迁移数据" tabindex="-1">从 YAML 迁移数据 <a class="header-anchor" href="#从-yaml-迁移数据" aria-label="Permalink to &quot;从 YAML 迁移数据&quot;">​</a></h2><p>单独启用 SQL 不会将玩家的数据从默认的 YAML 存储方法中迁移。若要迁移数据，你需要按如下步骤操作：</p><ol><li>处于 YAML 模式时，通过 <code>/skills backup save</code> 保存数据备份。</li><li>关闭服务器。</li><li>按“基础搭建”部分所讲建立数据库并切换存储类型（请确保修改后重启）。</li><li>输入命令 <code>/skills backup load [文件名称]</code>，<code>文件名称</code> 即为先前保存的备份文件名称（可在 <code>backup</code> 文件夹下找到）。</li></ol>',10)),a(l),a(i)])}const k=t(r,[["render",d]]);export{b as __pageData,k as default};
