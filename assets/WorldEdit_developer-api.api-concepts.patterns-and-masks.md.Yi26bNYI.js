import{_ as c,C as o,c as s,o as n,an as r,G as t}from"./chunks/framework.FiaHILad.js";const C=JSON.parse('{"title":"图案与蒙版","description":"","frontmatter":{"breadcrumbs":[{"title":"Continue Project","link":"/WorldEdit"},{"title":"图案与蒙版","link":"/WorldEdit/developer-api.api-concepts.patterns-and-masks"}]},"headers":[],"relativePath":"WorldEdit/developer-api.api-concepts.patterns-and-masks.md","filePath":"WorldEdit/developer-api.api-concepts.patterns-and-masks.md"}'),p={name:"WorldEdit/developer-api.api-concepts.patterns-and-masks.md"};function i(l,e,_,m,k,u){const a=o("NolebaseGitContributors"),d=o("NolebaseGitChangelog");return n(),s("div",null,[e[0]||(e[0]=r('<h1 id="图案与蒙版" tabindex="-1">图案与蒙版 <a class="header-anchor" href="#图案与蒙版" aria-label="Permalink to &quot;图案与蒙版&quot;">​</a></h1><p>图案与蒙版在它们对应的章节中已有介绍。唯一的区别是它们必须通过对应的类进行构建，而不是从带有一定格式的字符串中读取。</p><p>单方块图案可通过 <code>BlockStateHolder</code> 表示，例如 <code>BlockState</code> 和 <code>BaseBlock</code>。其他图案种类可顾名思义，例如 <code>TypeApplyingPattern</code> 或 <code>RandomStatePattern</code>。你可以使用你的 IDE（编辑器软件）找到 <code>Pattern</code> 的子类。</p><p>蒙版略有不同。完全匹配和模糊判定的方块<em>状态</em>都是通过 <code>BlockMask</code> 完成的，但你也可以只对方块<em>种类</em>（<code>BlockTypeMask</code>）或<em>属性</em>（<code>BlockStateMask</code>）进行蒙版操作。<code>Masks</code> 类下还有许多使用蒙版。与上文相似，非常推荐你用你的 IDE（编辑器软件）查找 <code>Masks</code> 的子类。</p>',4)),t(a),t(d)])}const f=c(p,[["render",i]]);export{C as __pageData,f as default};
